---
- name: Gather needed facts
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - env
      - distribution_major_version
  when: ansible_facts.env is not defined or
        ansible_facts.distribution_major_version is not defined

- name: Set sshd options to enable
  ansible.builtin.set_fact:
    sshd: "{{ sshd_options | default({}, true) }}"

- name: Fail if root trying to block root access completely
  ansible.builtin.fail:
    msg: "Refusing to configure 'PermitRootLogin no' when connected as root."
  when:
    - "'SUDO_USER' not in ansible_facts.env"
    - "'PermitRootLogin' in sshd"
    - "sshd.PermitRootLogin == 'no'"

- name: Set sshd options to disable
  ansible.builtin.set_fact:
    sshd_disable: "{{ sshd_options_disable | default([], true) }}"

- name: Check sshd_config.d directory
  ansible.builtin.stat:
    path: /etc/ssh/sshd_config.d
  register: config_dir

- name: Set sshd configuration file to use
  ansible.builtin.set_fact:
    config_file: "{{ '/etc/ssh/sshd_config'
                     if not config_dir.stat.exists else '/etc/ssh/sshd_config.d/0-ansible.conf' }}"

- name: Locate other sshd configuration files
  ansible.builtin.find:
    paths: /etc/ssh/sshd_config.d
    patterns: '*.conf'
  register: config_files
  when: config_dir.stat.exists

- name: Reset sshd configuration files to RPM defaults
  vars:
    suffix: "{{ '' if ansible_facts.distribution_major_version | int >= 10 else '_rhel89' }}"
    reset_files:
      - ssh/sshd_config
      - "{{ 'ssh/sshd_config.d/40-redhat-crypto-policies.conf' if ansible_facts.distribution_major_version | int >= 10 else '' }}"
      - ssh/sshd_config.d/50-redhat.conf
      - "{{ 'sysconfig/sshd' if not sshd_sysconfig_file else '' }}"
  ansible.builtin.copy:
    src: "{{ item | basename + suffix }}"
    dest: /etc/{{ item }}
    mode: "{{ '0640' if item == 'sysconfig/sshd' else '0600' }}"
    validate: "{{ omit if item == 'sysconfig/sshd' else '/usr/sbin/sshd -tf %s' }}"
  register: files_reset
  loop: "{{ reset_files | select }}"
  loop_control:
    label: /etc/{{ item }}
  when:
    - config_dir.stat.exists
    - sshd_configuration_config_reset | bool
    - ansible_facts.distribution_major_version | int >= 9

- name: Copy sshd sysconfig file
  ansible.builtin.copy:
    src: "{{ sshd_sysconfig_file }}"
    dest: /etc/sysconfig/sshd
    mode: '0640'
  register: sysconfig_copy
  when:
    - sshd_sysconfig_file is not none
    - sshd_sysconfig_file | length > 0
    - ansible_facts.distribution_major_version | int >= 9

- name: Create sshd configuration file
  ansible.builtin.template:
    src: sshd_config.j2
    dest: "{{ config_file }}"
    mode: '0600'
    validate: /usr/sbin/sshd -tf %s
  register: config_create
  when:
    - config_dir.stat.exists
    - ansible_facts.distribution_major_version | int >= 9

- name: Enable sshd configuration options
  ansible.builtin.lineinfile:
    path: "{{ config_file }}"
    regexp: '^(|#){{ item.key }} .*'
    line: '{{ item.key + " " + item.value | string }}'
    create: true
    mode: '0600'
    validate: /usr/sbin/sshd -tf %s
  register: enable_options
  loop: "{{ sshd | dict2items | select }}"
  when:
    - item.key not in sshd_disable
    - item.key.split(' ')[0] not in ['HostKey', 'ListenAddress', 'Match']

- name: Disable sshd configuration options
  vars:
    main_file: /etc/ssh/sshd_config
    update_files: "{{ [main_file] + config_files.files | default([]) | map(attribute='path') }}"
  ansible.builtin.replace:
    path: "{{ item.0 }}"
    regexp: '^({{ item.1 }} .*)'
    replace: '#\1'
    validate: /usr/sbin/sshd -tf %s
  register: disable_options
  loop: "{{ update_files | sort | unique | product(sshd_disable) }}"

- name: Remove unrecognized sshd configuration files
  vars:
    self_config: /etc/ssh/sshd_config.d/0-ansible.conf
    files_remove:
      - /etc/ssh/sshd_config.d/*
    files_remove_exclude: "{{ [self_config] + sshd_configuration_files_known | default([], true) }}"
  ansible.builtin.include_role:
    name: files_remove
  when:
    - config_dir.stat.exists
    - sshd_configuration_exclusive | bool

- name: Reload sshd to apply configuration changes
  ansible.builtin.service:
    name: sshd
    state: reloaded
  when: files_reset is changed or
        sysconfig_copy is changed or
        config_create is changed or
        enable_options is changed or
        disable_options is changed or
        (config_dir.stat.exists and sshd_configuration_exclusive | bool and remove_files is changed)
