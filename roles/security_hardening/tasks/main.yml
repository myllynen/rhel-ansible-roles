---
- name: Gather needed facts
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution_major_version
  when: ansible_facts.distribution_major_version is not defined

- name: Install required packages
  vars:
    security_packages:
      - crypto-policies-scripts
      - grubby
      - "{{ 'mokutil' if secure_boot_verify | bool else '' }}"
    selinux_packages:
      - python3-libselinux
      - python3-libsemanage
      - policycoreutils-python-utils
      - selinux-policy-targeted
      - setools-console
  ansible.builtin.dnf:
    name: "{{ security_packages | select | list + selinux_packages }}"
    state: present

- name: Gather package facts
  ansible.builtin.package_facts:

- name: Check Secure Boot state
  check_mode: false
  ansible.builtin.command: mokutil --sb-state
  register: sb_state
  failed_when: false
  changed_when: false
  when:
    - "'mokutil' in ansible_facts.packages"
    - secure_boot_verify | bool

- name: Fail if Secure Boot not enabled
  ansible.builtin.fail:
    msg: "Secure Boot not enabled."
  when:
    - "'mokutil' in ansible_facts.packages"
    - secure_boot_verify | bool
    - sb_state.stdout | regex_search("Secure?Boot enabled") is none

- name: Check kernel lockdown configuration
  vars:
    lockdown_param: "{{ 'lockdown=' + kernel_lockdown if kernel_lockdown != 'disabled' else 'lockdown' }}"
  check_mode: true
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX=.*("| ){{ lockdown_param }}(=| |")'
    state: absent
  register: lockdown_check
  changed_when: false
  when: ansible_facts.distribution_major_version | int >= 9

- name: Configure kernel lockdown
  ansible.builtin.command: >
    grubby
    --update-kernel=ALL
    --remove-args=lockdown
    "{{ '--args=lockdown=' + kernel_lockdown if kernel_lockdown != 'disabled' else '' }}"
  register: lockdown_config
  changed_when: true
  when:
    - "'grubby' in ansible_facts.packages"
    - ansible_facts.distribution_major_version | int >= 9
    - (kernel_lockdown == 'disabled' and lockdown_check.found != 0) or
      (kernel_lockdown != 'disabled' and lockdown_check.found == 0)

- name: Configure SELinux state
  ansible.posix.selinux:
    policy: targeted
    state: "{{ selinux }}"
    update_kernel_param: true
  register: selinux_config
  when:
    - "'grubby' in ansible_facts.packages"
    - "'python3-libselinux' in ansible_facts.packages"

- name: Check current crypto policy
  check_mode: false
  ansible.builtin.command: update-crypto-policies --show
  register: current_crypto_policy
  changed_when: false
  when: "'crypto-policies-scripts' in ansible_facts.packages"

- name: Configure crypto policy
  ansible.builtin.command: update-crypto-policies --no-reload --set {{ crypto_policy }}
  register: crypto_policy_config
  changed_when: true
  when:
    - "'crypto-policies-scripts' in ansible_facts.packages"
    - current_crypto_policy.stdout != crypto_policy

- name: Check SCP protocol configuration
  ansible.builtin.stat:
    path: /etc/ssh/disable_scp
  register: scp_state

- name: Configure SCP protocol state
  ansible.builtin.file:
    state: "{{ 'absent' if scp_protocol_enable | bool else 'touch' }}"
    path: /etc/ssh/disable_scp
    mode: '0644'
  when: scp_state.stat.exists == scp_protocol_enable | bool

- name: Reboot system
  ansible.builtin.reboot:
  when: lockdown_config is changed or
        (selinux_config.reboot_required is defined and selinux_config.reboot_required) or
        crypto_policy_config is changed
