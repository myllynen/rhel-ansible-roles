---
- name: Gather needed facts
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution_major_version
  when: ansible_facts.distribution_major_version is not defined

- name: Install grubby package
  ansible.builtin.dnf:
    name: grubby
    state: present
  when: false

- name: Create default boot parameter configuration file
  ansible.builtin.file:
    path: /etc/default/grub
    state: touch
    owner: root
    group: root
    mode: '0644'
    access_time: preserve
    modification_time: preserve

- name: Check enabled boot parameters
  check_mode: true
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX=.*("| ){{ item }}(=| |")'
    state: absent
  register: enable_check
  changed_when: false
  loop: "{{ boot_parameters_enable | select }}"

- name: Check disabled boot parameters
  check_mode: true
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX=.*("| ){{ item }}(=| |")'
    state: absent
  register: disable_check
  changed_when: false
  loop: "{{ boot_parameters_disable | select }}"

- name: Configure boot parameters
  ansible.builtin.command: >
    grubby
    --update-kernel=ALL
    --args="{{ boot_parameters_enable | default([], true) | join(' ') }}"
    --remove-args="{{ boot_parameters_disable | default([], true) | join(' ') }}"
  register: boot_config
  changed_when: true
  when: 0 in enable_check.results | map(attribute='found') or
        1 in disable_check.results | map(attribute='found')

- name: Update boot loader timeout configuration
  ansible.builtin.replace:
    path: /etc/default/grub
    regexp: '^GRUB_TIMEOUT=.*'
    replace: 'GRUB_TIMEOUT={{ boot_parameters_timeout }}'
  register: boot_timeout
  when:
    - boot_parameters_timeout is integer
    - boot_parameters_timeout | int >= 1

- name: Determine platform type
  ansible.builtin.stat:
    path: /sys/firmware/efi
  register: efi_dir

- name: Set boot loader configuration files
  vars:
    old_rhel: "{{ true if ansible_facts.distribution_major_version | int < 9 else false }}"
    efi_path: "{{ true if old_rhel and efi_dir.stat.exists else false }}"
  ansible.builtin.set_fact:
    grub_config: "{{ '/boot/grub2/grub.cfg' if not efi_path else '/boot/efi/EFI/redhat/grub.cfg' }}"
    user_config: "{{ '/boot/grub2/user.cfg' if not efi_path else '/boot/efi/EFI/redhat/user.cfg' }}"

- name: Update boot loader password configuration
  ansible.builtin.copy:
    content: |
      GRUB2_PASSWORD={{ boot_parameters_password }}
    dest: "{{ user_config }}"
    mode: '0600'
  register: password_update
  when: boot_parameters_password | default(false)

- name: Remove boot loader password configuration
  ansible.builtin.file:
    state: absent
    path: "{{ user_config }}"
  register: password_remove
  when: not boot_parameters_password | default(true)

- name: Write boot loader configuration
  ansible.builtin.command: grub2-mkconfig -o {{ grub_config }}
  changed_when: true
  when: boot_timeout is changed or
        password_remove is changed or
        password_update is changed

- name: Reboot system
  ansible.builtin.reboot:
  when:
    - boot_parameters_reboot | bool
    - boot_config is changed

- name: Clear gathered facts
  ansible.builtin.meta: clear_facts
  when:
    - boot_parameters_reboot | bool
    - boot_config is changed
