---
- name: Update all packages
  # noqa: package-latest
  ansible.builtin.dnf:
    name: '*'
    state: latest
    update_cache: true
  register: package_install

- name: Set package update timestamp
  ansible.builtin.set_fact:
    patch_time: "{{ '%Y-%m-%d %H:%M:%S %Z' | strftime }}"
  when: system_update_display_updates | bool or
        system_update_email_report | bool

- name: Set updated packages
  ansible.builtin.set_fact:
    package_updates: "{{ package_install.results | default([]) | sort }}"
  when:
    - system_update_display_updates | bool or
      system_update_email_report | bool

- name: Display list of updated packages
  ansible.builtin.debug:
    msg: "{{ package_updates | join('\n') }}"
  when:
    - system_update_display_updates | bool
    - package_updates | length > 0

- name: Install dnf-plugins-core package
  ansible.builtin.dnf:
    name: dnf-plugins-core
    state: present
  when: system_update_reboot_policy == 'when_needed'

- name: Gather package facts
  ansible.builtin.package_facts:

- name: Check need for rebooting
  check_mode: false
  ansible.builtin.command: dnf -C --disableplugin=product-id,subscription-manager needs-restarting
  register: needs_restarting
  failed_when: false
  changed_when: false
  when:
    - "'dnf-plugins-core' in ansible_facts.packages"
    - system_update_reboot_policy == 'when_needed'

- name: Reboot system
  ansible.builtin.reboot:
  register: system_reboot
  when: (system_update_reboot_policy == 'always') or
        (system_update_reboot_policy == 'when_needed' and needs_restarting.stdout_lines is defined and
                                                          needs_restarting.stdout_lines | length > 0) or
        (system_update_reboot_policy == 'when_updated' and package_install is changed)

- name: Send email report
  ansible.builtin.include_tasks: report.yml
  when:
    - system_update_email_report | bool
    - package_updates | length > 0
